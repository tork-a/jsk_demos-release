<launch>
  <arg name="INTERACTIVE" default="false" />
  <arg name="RESOLUTION" default="0.01" />
  <arg name="SIMULATION" default="false" />
  <arg name="GLC_RECORD" default="false" />
  <arg name="PROCESSING_FRAME" default="odom" />
  <arg name="VALVE_CORRESPONDENCE_DISTANCE" default="0.1" />
  <arg name="TORUS_FINDER_OUTLIER_THRESHOLD" default="0.05" />
  <arg name="INPUT_CLOUD" default="/full_cloud2" />
  <arg name="VIEWER" default="true" />

  <include file="$(find drc_task_common)/launch/conservative_valve_viewer.launch" if="$(arg VIEWER)" >
    <arg name="GLC_RECORD" value="$(arg GLC_RECORD)" />
  </include>

  <arg unless="$(arg SIMULATION)" name="USE_MULTITHREAD_CALLBACK" value="true" />
  <arg unless="$(arg SIMULATION)" name="NUM_OF_THREAD_OMP"    value="0" />
  <arg unless="$(arg SIMULATION)" name="COLOR_REFERENCE_FILE" value="$(find jsk_pcl_ros)/config/drc_box_color.yaml" />
  <arg unless="$(arg SIMULATION)" name="MIN_LIKELIHOOD_PLANE" value="0.5" />
  <arg unless="$(arg SIMULATION)" name="MIN_CLOUD_SIZE_TORUS" value="100"  />
  <arg unless="$(arg SIMULATION)" name="MAX_RADIUS_TORUS"     value="0.25" />
  <arg unless="$(arg SIMULATION)" name="MIN_RADIUS_TORUS"     value="0.15"/>
  <arg unless="$(arg SIMULATION)" name="PLANE_MIN_AREA"       value="0.05"/>
  <arg unless="$(arg SIMULATION)" name="PLANE_TOLERANCE"      value="0.2"/>

  <arg if="$(arg SIMULATION)" name="USE_MULTITHREAD_CALLBACK" value="false" />
  <arg if="$(arg SIMULATION)" name="NUM_OF_THREAD_OMP" value="1" />
  <arg if="$(arg SIMULATION)" name="COLOR_REFERENCE_FILE" value="$(find jsk_pcl_ros)/config/drc_box_color.yaml" />
  <arg if="$(arg SIMULATION)" name="MIN_LIKELIHOOD_PLANE" value="0.35" />
  <arg if="$(arg SIMULATION)" name="MIN_CLOUD_SIZE_TORUS" value="80"  />
  <arg if="$(arg SIMULATION)" name="MAX_RADIUS_TORUS"     value="0.3" />
  <arg if="$(arg SIMULATION)" name="MIN_RADIUS_TORUS"     value="0.13"/>
  <arg if="$(arg SIMULATION)" name="PLANE_MIN_AREA"       value="0.2"/>
  <arg if="$(arg SIMULATION)" name="PLANE_TOLERANCE"      value="0.15"/>

  <!-- Prepare pointcloud  -->
  <group ns="valve_detection">
    <node pkg="jsk_pcl_ros" type="octree_voxel_grid" name="octree_voxel_grid">
      <remap from="~input" to="$(arg INPUT_CLOUD)" />
      <rosparam subst_value="true">
        resolution: $(arg RESOLUTION)
        use_multithread_callback: $(arg USE_MULTITHREAD_CALLBACK)
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="tf_transform_cloud" name="odom_laser">
      <remap from="~input" to="octree_voxel_grid/output" />
      <rosparam subst_value="true">
        target_frame_id: ground
        use_multithread_callback: $(arg USE_MULTITHREAD_CALLBACK)
      </rosparam>
    </node>
    
    <node pkg="jsk_pcl_ros" type="tf_transform_cloud" name="camera_laser">
      <remap from="~input" to="odom_laser/output" />
      <rosparam subst_value="true">
        target_frame_id: left_camera_optical_frame
        use_multithread_callback: $(arg USE_MULTITHREAD_CALLBACK)
      </rosparam>
    </node>

    <node pkg="jsk_pcl_ros" type="normal_estimation_omp" name="normal_estimation">
      <remap from="~input" to="odom_laser/output" />
      <rosparam subst_value="true">
        k_search: 50
        use_multithread_callback: $(arg USE_MULTITHREAD_CALLBACK)
        number_of_threads: $(arg NUM_OF_THREAD_OMP)
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="normal_direction_filter" name="normal_direction_filter">
      <remap from="~input" to="normal_estimation/output_with_xyz" />
      <remap from="~input_imu" to="/imu" />
      <rosparam>
        use_imu: false
        direction: [0, 0, 1]
        angle_offset: 1.57
        eps_angle: 0.5
      </rosparam>
    </node>
    <node pkg="nodelet" type="nodelet" name="normal_direction_filter_points" args="standalone pcl/ExtractIndices">
      <remap from="~input" to="normal_estimation/output_with_xyz" />
      <remap from="~indices" to="normal_direction_filter/output" />
    </node>
    <node pkg="jsk_pcl_ros" type="tf_transform_cloud" name="normal_direction_filter_points_camera">
      <remap from="~input" to="normal_estimation/output_with_xyz"/>
      <rosparam>
        target_frame_id: left_camera_optical_frame
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="region_growing_multiple_plane_segmentation" name="region_growing_multiple_plane_segmentation">
      <remap from="~input" to="normal_estimation/output_with_xyz" />
      <remap from="~input_normal" to="normal_estimation/output_with_xyz" />
      <rosparam subst_value="true">
        max_area: 5.0
        min_area: $(arg PLANE_MIN_AREA)
        cluster_tolerance: $(arg PLANE_TOLERANCE)
        use_multithread_callback: $(arg USE_MULTITHREAD_CALLBACK)
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros_utils" type="plane_rejector" name="plane_rejector">
      <remap from="~input_polygons" to="region_growing_multiple_plane_segmentation/output/polygons" />
      <remap from="~input_coefficients" to="region_growing_multiple_plane_segmentation/output/coefficients" />
      <remap from="~input_inliers" to="region_growing_multiple_plane_segmentation/output/inliers" />
      <rosparam subst_value="true">
        processing_frame_id: $(arg PROCESSING_FRAME)
        reference_axis: [0, 0, 1]
        angle: 1.57
        use_inliers: true
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer"
          name="region_growing_result_decomposer">
      <remap from="~input" to="normal_estimation/output_with_xyz" />
      <remap from="~target" to="region_growing_multiple_plane_segmentation/output/inliers"/>
    </node>

    <node pkg="jsk_pcl_ros" type="plane_concatenator" name="plane_concatenator" output="screen">
      <remap from="~input" to="normal_estimation/output_with_xyz" />
      <remap from="~input/indices" to="plane_rejector/output_inliers" />
      <remap from="~input/polygons" to="plane_rejector/output_polygons" />
      <remap from="~input/coefficients" to="plane_rejector/output_coefficients" />
      <rosparam>
        connect_distance_threshold: 0.2
        min_area: 1.0
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="polygon_array_transformer" name="plane_concatenator_transformed">
      <remap from="~input_polygons" to="plane_concatenator/output/polygons"/>
      <remap from="~input_coefficients" to="plane_concatenator/output/coefficients"/>
      <rosparam>
        frame_id: left_camera_optical_frame
      </rosparam>
    </node>

    <node pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" name="cluster_point_indices_decomposer">
      <remap from="~input" to="normal_estimation/output_with_xyz" />
      <remap from="~target" to="region_growing_multiple_plane_segmentation/output/clustering_result" />
    </node>
    <node pkg="jsk_perception" type="hsv_decomposer" name="hsv_decomposer">
      <remap from="~input" to="/multisense_local/left/image_rect_color" />
    </node>
    <node pkg="jsk_perception" type="polygon_array_color_histogram" name="polygon_array_color_histogram">
      <remap from="~input" to="plane_concatenator_transformed/output_polygons" />
      <remap from="~input/info" to="/multisense_local/left/camera_info" />
      <remap from="~input/image" to="hsv_decomposer/output/hue" />
      <rosparam>
        bin_size: 50
        synchronizer_queue_size: 2000
      </rosparam>
    </node>
    <node pkg="jsk_perception" type="polygon_array_color_likelihood" name="polygon_array_color_likelihood">
      <remap from="~input/polygons" to="plane_concatenator_transformed/output_polygons" />
      <remap from="~input/histograms" to="polygon_array_color_histogram/output" />
      <remap from="~input/reference" to="selected_polygon_color_histogram/output/unwrap" />
      <rosparam subst_value="true">
        coefficient_method: 3 # bhattacharyya
        reference_file: $(arg COLOR_REFERENCE_FILE)
        synchronizer_queue_size: 2000
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="extract_top_polygon_likelihood.py" name="extract_top_polygon_likelihood">
      <remap from="~input" to="polygon_array_color_likelihood/output" />
      <remap from="~input/coefficients" to="plane_concatenator_transformed/output_coefficients" />
      <rosparam subst_value="true">
        min_likelihood: $(arg MIN_LIKELIHOOD_PLANE)
      </rosparam>
    </node>
    <node pkg="image_view" type="image_view" name="polygon_array_color_histogram_debug_view">
      <remap to="polygon_array_color_histogram/debug/polygon_image" from="image" />
    </node>
    <node pkg="jsk_pcl_ros" type="multi_plane_extraction" name="multi_plane_extraction" output="screen">
      <remap from="~input" to="camera_laser/output" />
      <remap from="~input_polygons" to="extract_top_polygon_likelihood/output"/>
      <remap from="~input_coefficients" to="extract_top_polygon_likelihood/output/coefficients"/>
      <rosparam>
        use_indices: false
        use_sensor_frame: true
        sensor_frame: head_root
        min_height: 0.35
        max_height: 0.5
        max_queue_size: 2000
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="euclidean_clustering" name="euclidean_clustering">
      <remap from="~input" to="multi_plane_extraction/output" />
      <rosparam>
        tolerance: 0.05
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer" name="euclidean_clustering_decomposer">
      <remap from="~input" to="multi_plane_extraction/output" />
      <remap from="~target" to="euclidean_clustering/output" />
      <remap from="~align_planes" to="extract_top_polygon_likelihood/output" />
      <remap from="~align_planes_coefficients" to="extract_top_polygon_likelihood/output/coefficients" />
      <rosparam>
        align_boxes: true
        use_pca: true
        publish_clouds: false
        publish_tf: false
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="torus_finder" name="torus_finder">
      <remap from="~input" to="euclidean_clustering_decomposer/debug_output" />
      <rosparam subst_value="true">
        algorithm: LMEDS
        max_iterations: 10000
        voxel_grid_sampling: true
        voxel_size: 0.005
        min_size: $(arg MIN_CLOUD_SIZE_TORUS)
        max_radius: $(arg MAX_RADIUS_TORUS)
        min_radius: $(arg MIN_RADIUS_TORUS)
        outlier_threshold: $(arg TORUS_FINDER_OUTLIER_THRESHOLD)
      </rosparam>
    </node>
    <node pkg="drc_task_common" type="valve_rejector.py" name="valve_rejector" output="screen"
          respawn="true">
      <rosparam>
        eps_angle: 0.3
      </rosparam>
    </node>
    <node pkg="jsk_pcl_ros" type="extract_indices" name="torus_points">
      <remap from="~input" to="euclidean_clustering_decomposer/debug_output" />
      <remap from="~indices" to="torus_finder/output/inliers" />
    </node>
    <group if="$(arg INTERACTIVE)">
      <node pkg="jsk_interactive_marker" type="polygon_marker" name="polygon_marker">
        <remap from="~polygon_array" to="plane_concatenator_transformed/output_polygons" />
      </node>
      <node pkg="jsk_perception" type="polygon_array_color_histogram" name="selected_polygon_color_histogram">
        <remap from="~input" to="polygon_marker/selected_polygon_array" />
        <remap from="~input/info" to="/multisense_local/left/camera_info" />
        <remap from="~input/image" to="hsv_decomposer/output/hue" />
        <rosparam>
          bin_size: 50
        </rosparam>
      </node>
      <node pkg="jsk_perception" type="unwrap_histogram_with_range_array.py" name="unwral_selected_polygon_color_histogram">
        <remap from="~input" to="selected_polygon_color_histogram/output"/>
        <remap from="~output" to="selected_polygon_color_histogram/output/unwrap"/>
      </node>
    </group>
    <group unless="$(arg INTERACTIVE)">
      <node pkg="rostopic" name="selected_polygon_color_histogram" type="rostopic"
            args="pub selected_polygon_color_histogram/output/unwrap jsk_recognition_msgs/HistogramWithRange -f $(find jsk_pcl_ros)/config/drc_box_color.yaml -r 1" 
            />
    </group>
    <node pkg="pcl_ros" type="pcd_to_pointcloud" name="reference_model" 
          args="$(find drc_task_common)/light_models/valve.pcd 1">
      <rosparam>
        frame_id: left_camera_optical_frame
      </rosparam>
      <remap from="cloud_pcd" to="valve_reference_cloud" />
    </node>
    <group>
      <!-- downsample for ICP registration -->
      <remap from="/tf" to="tf_null" />
      <node pkg="nodelet" type="nodelet" name="downsample_reference_cloud"
            args="standalone pcl/VoxelGrid">
        <remap from="~input" to="valve_reference_cloud" />
        <rosparam>
          filter_limit_min: -10
          filter_limit_max: 10
          leaf_size: 0.01
        </rosparam>
      </node>
      <node pkg="nodelet" type="nodelet" name="downsample_target_cloud"
            args="standalone pcl/VoxelGrid">
        <remap from="~input" to="euclidean_clustering_decomposer/debug_output" />
        <rosparam>
          filter_limit_min: -10
          filter_limit_max: 10
          leaf_size: 0.01
        </rosparam>
      </node>
    </group>
    <node pkg="jsk_pcl_ros" type="icp_registration" name="icp_registration" output="screen">
      <remap from="~input" to="downsample_target_cloud/output" />
      <remap from="~input_reference" to="downsample_reference_cloud/output" />
      <remap from="~input_offset" to="valve_rejector/output/pose" />
      <rosparam subst_value="true">
        use_offset_pose: true
        use_flipped_initial_pose: false
        max_iteration: 10000
        correspondence_distance: $(arg VALVE_CORRESPONDENCE_DISTANCE)
        transform_epsilon: 0.0000001
        euclidean_fittness_epsilon: 0.0001
        rotation_epsilon: 0.0002
        ransac_iterations: 10000
        ransac_outlier_threshold: 0.4
      </rosparam>
    </node>
    <!-- for saving model -->
    <node pkg="jsk_pcl_ros_utils" type="pointcloud_relative_from_pose_stamped" name="model_relative_from_valve_origin">
      <remap from="~input" to="euclidean_clustering_decomposer/debug_output" />
      <remap from="~input/pose" to="torus_finder/output/pose" />
    </node>
    <node pkg="drc_task_common" type="octree_info.py" name="octree_info">
      <remap from="~cloud" to="octree_voxel_grid/output" />
      <remap from="~resolution" to="octree_voxel_grid/output_resolution" />
      <rosparam>
        text_size: 24
      </rosparam>
    </node>
    <node pkg="drc_task_common" type="scan_time_info.py" name="scan_time_info">
      <remap from="~range" to="/tilt_laser_listener/output" />
      <rosparam>
        text_size: 24
      </rosparam>
    </node>
    <node pkg="jsk_rviz_plugins" type="float32_to_overlay_text.py" name="torus_finder_info">
      <remap from="~input" to="torus_finder/output/latest_time" />
      <rosparam>
        format: "Torus fitting took {0} sec"
        text_size: 24
        top: 80
      </rosparam>
    </node>
    <node pkg="jsk_rviz_plugins" type="float32_to_overlay_text.py" name="icp_info">
      <remap from="~input" to="icp_registration/output/latest_time" />
      <rosparam>
        format: "ICP registration took {0} sec"
        text_size: 24
        top: 120
      </rosparam>
    </node>
    <node pkg="jsk_rviz_plugins" type="float32_to_overlay_text.py" name="plane_segmentation_info">
      <remap from="~input" to="region_growing_multiple_plane_segmentation/output/latest_time" />
      <rosparam>
        format: "Plane segmentation took {0} sec"
        text_size: 24
        top: 40
      </rosparam>
    </node>
    <node pkg="jsk_rviz_plugins" type="float32_to_overlay_text.py" name="perception_info">
      <rosparam>
        multi_topics: [torus_finder/output/latest_time, icp_registration/output/latest_time, region_growing_multiple_plane_segmentation/output/latest_time, scan_time_info/time]
        format: "Perception took {0} sec"
        text_size: 24
        top: 160
      </rosparam>
    </node>
  </group>
  <node pkg="jsk_rviz_plugins" type="rosconsole_overlay_text.py" name="rosconsole_overlay_text" if="false">
    <rosparam>
      nodes_regexp: ^/valve_detection
    </rosparam>
  </node>
</launch>
