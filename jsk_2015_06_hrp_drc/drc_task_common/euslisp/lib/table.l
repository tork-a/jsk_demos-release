;; table.l
(load "package://drc_task_common/euslisp/lib/util.l")
(load "package://drc_task_common/euslisp/lib/plotlib.l")
(ros::roseus-add-msgs "jsk_recognition_msgs")

(defun unique-value (all)
  (unique-value-impl all nil))

(defun unique-value-impl (all result)
  (cond ((null all)
         result)
        (t
         (unique-value-impl (remove-if #'(lambda (d)
                                           (equal (car all) d))
                                       all)
                            (append result (list (car all)))))))

(defclass table
  :super propertied-object
  :slots (column data))

(defmethod table
  (:init (acolumn &optional (adata))
    (setq column acolumn)
    (setq data adata)
    self)
  (:column () column)
  (:data () data)
  (:add (new-data)
    (setq data (append data (list new-data)))
    t)
  (:column-index (c)
    (position c column :test #'equal))
  (:column-data (c)
    (let ((index (send self :column-index c)))
      (mapcar #'(lambda (d) (elt d index)) data)))
  (:plot-data-array ()
    (multi-plot-data (mapcar #'(lambda (data-column)
                                 (list (send self :column-data (car column))
                                       (send self :column-data data-column)))
                             (remove-if-not #'(lambda (c)
                                                (numberp (car (send self :column-data c))))
                                            (cdr column)))))
  (:publish-as-plot-data (topic)
    ;; publish data as jsk_recognition_msgs/PlotDataArray
    (ros::advertise topic jsk_recognition_msgs::PlotDataArray)
    (ros::publish topic (send self :plot-data-array))
    )
  (:get-static-values (target-columns)
    (let ((all 
           (mapcar #'(lambda (d)
                       (send self :get-columns-values target-columns d))
                   data)))
      ;; make all unique
      (unique-value all)))
  (:get-column-value (target-column)
    (mapcar #'(lambda (d)
                (car (send self :get-columns-values (list target-column) d)))
            data))
  (:get-columns-values (target-columns data)
    (mapcar #'(lambda (c)
                (elt data (send self :column-index c)))
            target-columns))
  (:get-target-from-static-value (target-columns static-value static-columns)
    (mapcar #'(lambda (d)
                (send self :get-columns-values target-columns d))
            (remove-if-not #'(lambda (d)
                               (equal (send self :get-columns-values static-columns d)
                                      static-value))
                           data)))
  (:average (target-columns ignore-columns &optional (debug nil))
    (let ((static-columns (remove-if #'(lambda (c)
                                         (member c (append target-columns ignore-columns) :test #'string=))
                                     column)))
      (if debug (warn "static-columns: ~A~%" static-columns))
      (let ((tbl (instance table :init (append target-columns static-columns))))
        (let ((static-values (send self :get-static-values static-columns)))
          (if debug (warn "static-values: ~A~%" (length static-values)))
          (dolist (static-value static-values)
            (let ((target-values (send self :get-target-from-static-value target-columns static-value static-columns)))
              ;; '((0 1) (0 1) (0 1) ...)
              ;; take average
              (let ((average-values (mapcar #'mean (transpose-list-array target-values))))
                (send tbl :add (append average-values static-value))
                ))
            )
          )
        tbl)))
  (:sort-by (c)
    (let ((index (send self :column-index c)))
      (sort data #'(lambda (x y)
                     (< (elt x index) (elt y index))))))
  (:filter-if (func)
    "func := #'(lambda (tbl column d) ...)"
    (let ((tbl (instance table :init column)))
      (dolist (d data)
        (if (funcall func self column d)
            (send tbl :add d)))
      tbl))
  (:write (file &rest args)
    (let ((path (apply #'format nil file args)))
      (with-open-file (f (ros::resolve-ros-path* path)
                         :direction :output)
        (format f "~A~%" (string-join "," column))
        (dolist (d data)
          (format f "~A~%" (string-join "," (mapcar #'string d))))
        )
      self))
  (:merge (another)
    "merge two tables"
    (if (not (equal (send self :column) (send another :column)))
        (error "not mergable: ~A with ~A" (send self :column) (send another :column))
      (progn
        (dolist (d (send another :data))
          (send self :add d))
        ))
    )
  (:print ()
    ;; print column
    (format t "~A data~%" (length data))
    (format t "=====================================~%")
    (format t "~A~%" (string-join " " column))
    (dolist (d data)
      (dotimes (i (length d))
        (let ((column (elt column i)))
          (if (numberp (elt d i))
              (format t (format nil "~A~A~A" "~" (length column) "f") (elt d i))
            (format t "~A~%" (elt d i)))
          (if (= i (1- (length d)))     ;last one
              (format t "~%")
            (format t " ")
            ))))
    (format t "=====================================~%")
    )
  (:data-num ()
    (length data))
  )

(defun load-table (file)
  (with-open-file (f (ros::resolve-ros-path* file)
                     :direction :input)
    (let ((column (string-split #\, (read-line f nil nil))))
      (let ((tbl (instance table :init column))
            (line nil))
        (while (setq line (read-line f nil nil))
          (send tbl :add (mapcar #'read-from-string (string-split #\, line))))
        tbl))))

(defun test-table-write ()
  (let ((tbl (instance table :init '("foo" "bar" "foobar"))))
    (send tbl :add '(1 2 3))
    (send tbl :add '(1 2 3))
    (send tbl :add '(1 2 3))
    (send tbl :add '(1 2 3))
    (send tbl :add '(1 2 3))
    (send tbl :print)
    (send tbl :write "/tmp/foo.csv")
    ))

(defun test-table-read ()
  (let ((tbl (load-table "/tmp/foo.csv")))
    tbl))

(defun test-table-publish ()
  (let ((tbl (instance table :init '("foo" "bar" "foobar"))))
    (send tbl :add '(1 2 3))
    (send tbl :add '(2 2 3))
    (send tbl :add '(3 2 3))
    (send tbl :add '(4 2 3))
    (send tbl :add '(5 2 3))
    (send tbl :print)
    (send tbl :publish-as-plot-data "foo")
    tbl))

(defun normalize-value (v max min)
  (/ (- v min) (float (- max min))))

;; (load "table.l")