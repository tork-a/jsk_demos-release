(load "package://hrpsys_ros_bridge_tutorials/euslisp/hrp2jsknt-interface.l")
(load "package://drc_task_common/euslisp/vehicle/steering_estimation/hrp2jsknt-mannequin-handle-trajectory-dump.l")
(ros::roseus-add-msgs "geometry_msgs")

(defun init ()
  (setq *end-coords-list* nil)
  (hrp2jsknt-init)
  (send *hrp2jsknt* :move-to (make-coords :pos (float-vector 180 370.0 80) :rpy (float-vector 0.0 (- (/ pi 16)) 0.0)) :world)
  (objects *hrp2jsknt*)
  ;; make-end-coords-list
  (dolist (av *buffer*)
    (send *hrp2jsknt* :angle-vector av)
    (push (send (send *hrp2jsknt* :larm :end-coords) :copy-worldcoords) *end-coords-list*) ;; reverse of reverse is obverse
    )
  (ros::roseus "test_steering_coords_estimation")
  (ros::advertise "/drive/torus_finder/input/polygon" geometry_msgs::PolygonStamped 1)
  )

(defun draw-end-effector-trajectory ()
  (dotimes (i (- (length *end-coords-list*) 1))
    (send *viewer* :draw-line (send (elt *end-coords-list* i) :pos) (send (elt *end-coords-list* (+ i 1)) :pos))
    (send *viewer* :viewsurface :flush)
    )
  )

(defun calc-centroid ()
  (let ((tmp-centroid (float-vector 0 0 0)))
    (dolist (ec *end-coords-list*)
      (dotimes (i 3)
        (setf (elt tmp-centroid i) (+ (elt tmp-centroid i) (/ (elt (send ec :pos) i) (length *end-coords-list*))))
        )
      )
    (send *viewer* :draw-star tmp-centroid 0.1)
    (send *viewer* :viewsurface :flush)
    tmp-centroid
    )
  )

(defun make-polygon-stamped-msg
  ()
  (let* ((polygon-stamped-msg (instance geometry_msgs::PolygonStamped :init))
         (header (send polygon-stamped-msg :header))
         (polygon (send polygon-stamped-msg :polygon))
         (body-coords (send (car (send *hrp2jsknt* :links)) :copy-worldcoords))
         body-relative-ec tmp-ec tmp-pos tmp-point32 tmp-point32-list
         )
    (dolist (ec *end-coords-list*)
      (setq tmp-ec (send ec :copy-worldcoords))
      (setq body-relative-ec (send body-coords :transformation tmp-ec :local))
      (setq tmp-pos (send body-relative-ec :pos))      
      ;; (setq tmp-pos (send tmp-ec :pos))
      (setq tmp-point32 (instance geometry_msgs::Point32 :init))
      (setq tmp-pos (scale 0.001 tmp-pos))
      (send tmp-point32 :x (elt tmp-pos 0))
      (send tmp-point32 :y (elt tmp-pos 1))
      (send tmp-point32 :z (elt tmp-pos 2))
      (push tmp-point32 tmp-point32-list)
      )
    (send polygon :points tmp-point32-list)
    (send header :stamp (ros::time-now))
    (send header :frame_id "BODY")
    (ros::publish "/drive/torus_finder/input/polygon" polygon-stamped-msg)
    )
  )

