<launch>
  <arg name="INPUT_IMAGE" value="/multisense/left/image_rect_color" />
  <arg name="INPUT_CAMERA_INFO" value="/multisense/left/camera_info" />
  <arg name="INPUT_POINT_CLOUD" value="/laser_preprocess/camera_laser_cloud/output" />
  <arg name="INPUT_DOWNSAMPLED_POINT_CLOUD" value="/laser_preprocess/camera_laser_cloud/output" />
  <arg name="DEBUG" default="false" />
  <group ns="drill_recognition_for_wall">
    <group if="$(arg DEBUG)">
      <node pkg="image_view2" type="image_view2" name="image_view2">
        <remap from="image" to="$(arg INPUT_IMAGE)" />
        <remap from="$(arg INPUT_IMAGE)/poly" to="input_poly" />
        <rosparam>
          interaction_mode: poly
        </rosparam>
      </node>
    </group>
    <node pkg="jsk_topic_tools" type="topic_buffer_client" name="input_buffer">
      <rosparam>
        fixed_rate: 0.1
        periodic_rate: 0.1
        latched: true
        topics: ["input_poly"]
        use_service: false
      </rosparam>
      <remap from="input_poly_update" to="input_poly" />
    </node>

    <node pkg="jsk_topic_tools" type="standalone_complexed_nodelet"
          name="manager" respawn="true" output="log">
      <rosparam subst_value="true">
nodelets:
  - name: downsampler
    type: pcl/VoxelGrid
    remappings:
      - from: ~input
        to: $(arg INPUT_POINT_CLOUD)
  - name: mask_image_generator
    type: jsk_perception/MaskImageGenerator
    remappings:
      - from: ~input
        to: $(arg INPUT_IMAGE)
  - name: mask_image_filter
    type: jsk_pcl/MaskImageFilter
    remappings:
      - from: ~input
        to: downsampler/output
      - from: ~input/mask
        to: mask_image_generator/output
      - from: ~input/camera_info
        to: $(arg INPUT_CAMERA_INFO)
  - name: mask_image_filter_points
    type: pcl/ExtractIndices
    remappings:
      - from: ~input
        to: downsampler/output
      - from: ~indices
        to: mask_image_filter/output
  - name: organized_points_converter
    type: jsk_pcl/DepthImageCreator
    remappings:
      - from: ~info
        to: $(arg INPUT_CAMERA_INFO)
      - from: ~input
        to: mask_image_filter_points/output
  - name: normal_estimation
    type: jsk_pcl/NormalEstimationOMP
    remappings:
      - from: ~input
        to: mask_image_filter_points/output
  - name: screenpoint
    type: jsk_pcl/PointcloudScreenpoint
    remappings:
      - from: ~poly
        to: input_poly_buffered
      - from: ~points
        to: organized_points_converter/output_cloud
  - name: plane_segmentation
    type: jsk_pcl/RegionGrowingMultiplePlaneSegmentation
    remappings:
      - from: ~input
        to: normal_estimation/output_with_xyz
      - from: ~input_normal
        to: normal_estimation/output_with_xyz
  - name: snapit
    type: jsk_pcl/Snapit
    remappings:
      - from: ~input/polygons
        to: plane_segmentation/output/polygons
      - from: ~input/polygon_coefficients
        to: plane_segmentation/output/coefficients
      - from: ~input/convex_align_polygon
        to: screenpoint/output_polygon
  - name: snapshot
    type: jsk_topic_tools/Snapshot
    remappings:
      - from: ~input
        to: snapit/output/convex_aligned_pose_array
      </rosparam>
    </node>
    <group ns="downsampler">
      <rosparam>
        leaf_size: 0.02
        filter_limit_min: -100
        filter_limit_max: 100
      </rosparam>
    </group>
    <group ns="mask_image_generator">
      <rosparam>
        offset_x: 0
        offset_y: 0
        width: 1024
        height: 512
      </rosparam>
    </group>
    <group ns="mask_image_filter">
      <rosparam>
        always_subscribe: false
      </rosparam>
    </group>
    <group ns="mask_image_filter_points">
    </group>
    <group ns="organized_points_converter">
      <rosparam>
        use_asynchronous: true
      </rosparam>
    </group>
    <group ns="normal_estimation">
      <rosparam>
        k_search: 10
        radius_search: 0.0
      </rosparam>
    </group>
    <group ns="screenpoint">
      <rosparam>
        use_poly: true
        crop_size: 100
      </rosparam>
    </group>
    <group ns="plane_segmentation">
      <rosparam>
        min_size: 300
        max_curvature: 0.01
        estimate_normal: true
      </rosparam>
    </group>
    <group ns="snapshot">
      <rosparam>
        latch: true
      </rosparam>
    </group>
  </group>
</launch>
