(require "package://hrpsys_ros_bridge_tutorials/euslisp/jaxon_red-interface.l")
(when (not (boundp '*jaxon_red*))
  (jaxon_red-init)
  (setq *robot* *jaxon_red*)
  )
(objects (list *robot*))
(format t ";; (get-up-main :real nil)~%")

;; negaeri for jvrc

(defun send-pose (&key (real nil) (base-time 5000))
  (warn "press Enter key~%")
  (read-line)
  (if real
      (progn
        (send *ri* :angle-vector (send *robot* :angle-vector) base-time)
        (send *ri* :wait-interpolation)
        )))

; 後ろに倒れる
(defun lie-backward (&key (real nil) (base-time 1000))
  (send *robot* :init-pose)
  (send (send *robot* :lleg :crotch-p) :joint-angle 40)
  (send (send *robot* :rleg :crotch-p) :joint-angle 40)
  (send-pose :real real :base-time base-time)
  )

; 前に倒れる
(defun lie-forward (&key (real nil) (base-time 1000))
  (send *robot* :init-pose)
  (send (send *robot* :lleg :crotch-p) :joint-angle -40)
  (send (send *robot* :rleg :crotch-p) :joint-angle -40)
  (send-pose :real real :base-time base-time)
  )

; うつ伏せからあおむけに右を軸にして寝返り
(defun rolling-to-right (&key (real nil) (base-time 5000))
  (send *robot* :rarm :shoulder-r :joint-angle -180)
  (send *robot* :larm :shoulder-p :joint-angle 90)
  (send *robot* :torso :waist-y :joint-angle 40)
  (send *robot* :rleg :crotch-p :joint-angle 40)
  (send-pose :real real :base-time base-time)
  (send *robot* :larm :elbow-p :joint-angle -90)
  (when real
    (send *ri* :angle-vector (send *robot* :angle-vector) base-time)
    (send *ri* :wait-interpolation)
    )
  (send *robot* :larm :shoulder-p :joint-angle 180)
  (send *robot* :torso :waist-y :joint-angle -40)
  (send *robot* :rleg :crotch-p :joint-angle 0)
  (send *robot* :lleg :crotch-p :joint-angle -40)
  (send-pose :real real :base-time base-time)
  (send *robot* :larm :shoulder-p :joint-angle 90)
  (send-pose :real real :base-time base-time)
  (send *robot* :larm-elbow-p :joint-angle 60)
  (send-pose :real real :base-time base-time)
  (send *robot* :larm :shoulder-p :joint-angle 0)
  (send-pose :real real :base-time base-time)
  (send *robot* :larm :shoulder-r :joint-angle 180)
  (send-pose :real real :base-time base-time)
  )

; うつ伏せからあおむけに左を軸にして寝返り
(defun rolling-to-left (&key (real nil) (base-time 5000))
  (send *robot* :larm :shoulder-r :joint-angle 180)
  (send *robot* :rarm :shoulder-p :joint-angle 90)
  (send *robot* :torso :waist-y :joint-angle -40)
  (send *robot* :lleg :crotch-p :joint-angle 40)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm :elbow-p :joint-angle -90)
  (when real
    (send *ri* :angle-vector (send *robot* :angle-vector) base-time)
    (send *ri* :wait-interpolation)
    )
  (send *robot* :rarm :shoulder-p :joint-angle 180)
  (send *robot* :torso :waist-y :joint-angle 40)
  (send *robot* :lleg :crotch-p :joint-angle 0)
  (send *robot* :rleg :crotch-p :joint-angle -40)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm :shoulder-p :joint-angle 90)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm-elbow-p :joint-angle 60)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm :shoulder-p :joint-angle 0)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm :shoulder-r :joint-angle -180)
  (send-pose :real real :base-time base-time)
  )

;;寝返り
(defun roll-over (&key (direction :left) (real nil) (base-time 5000))
  (send *ri* :start-grasp)
  (send *robot* :init-pose)
  (send-pose :real real :base-time (* 2 base-time))
  (while (y-or-n-p "~%try negaeri? press y to negaeri or press n to finish~%")
    (if (equal direction :left)
        (rolling-to-left :real real :base-time base-time)
      (rolling-to-right :real real :base-time base-time)
      )))

(defun prepare-for-getting-up (&key (face-down nil) (real nil) (base-time 5000))
  (send *ri* :start-grasp)
  (when face-down
    (send *robot* :init-pose)
    (send-pose :real real :base-time base-time)
    (send *robot* :rarm-elbow-p :joint-angle 60)
    (send *robot* :larm-elbow-p :joint-angle 60)
    (send-pose :real real :base-time base-time)
    (send *robot* :rarm :shoulder-r :joint-angle -180)
    (send *robot* :larm :shoulder-r :joint-angle 180)
    (send-pose :real real :base-time base-time)
    )
  (send *robot* :init-pose)
  (send *robot* :rarm-shoulder-r :joint-angle -180)
  (send *robot* :larm-shoulder-r :joint-angle 180)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm-shoulder-y :joint-angle -180)
  (send *robot* :larm-shoulder-y :joint-angle 180)
  (send-pose :real real :base-time base-time)
  )

;;起き上がり
(defun get-up (&key (face-down nil) (real nil) (base-time 5000))
  (prepare-for-getting-up :face-down face-down :real real :base-time base-time)
  (send *robot* :rleg-ankle-p :joint-angle -70)
  (send *robot* :lleg-ankle-p :joint-angle -70)
  (send-pose :real real :base-time base-time)
  (send *robot* :larm-shoulder-r :joint-angle 170)
  (send *robot* :rarm-shoulder-r :joint-angle -170)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm-shoulder-p :joint-angle 50)
  (send *robot* :larm-shoulder-p :joint-angle 50)
  (send-pose :real real :base-time base-time)
  (send *robot* :rleg-ankle-p :joint-angle -40)
  (send *robot* :lleg-ankle-p :joint-angle -40)
  (send *robot* :rleg-crotch-p :joint-angle -45)
  (send *robot* :lleg-crotch-p :joint-angle -45)
  (send *robot* :larm-shoulder-p :joint-angle 70)
  (send *robot* :rarm-shoulder-p :joint-angle 70)
  (send-pose :real real :base-time base-time)
  (send *robot* :lleg-ankle-p :joint-angle -70)
  (send *robot* :rleg-ankle-p :joint-angle -70)
  (send *robot* :lleg-crotch-p :joint-angle -75)
  (send *robot* :rleg-crotch-p :joint-angle -75)
  (send *robot* :rleg-knee-p :joint-angle 75)
  (send *robot* :lleg-knee-p :joint-angle 75)
  (send-pose :real real :base-time base-time)
  (send *robot* :lleg-knee-p :joint-angle 110)
  (send *robot* :rleg-knee-p :joint-angle 110)
  (send *robot* :rleg-crotch-p :joint-angle -110)
  (send *robot* :lleg-crotch-p :joint-angle -110)
  (send-pose :real real :base-time base-time)
  (send *robot* :rarm-shoulder-p :joint-angle 100)
  (send *robot* :larm-shoulder-p :joint-angle 100)
  (send *robot* :rleg-knee-p :joint-angle 150)
  (send *robot* :lleg-knee-p :joint-angle 150)
  (send-pose :real real :base-time base-time)
  (send *robot* :lleg-crotch-p :joint-angle -110)
  (send *robot* :rleg-crotch-p :joint-angle -110)
  (send *robot* :larm-shoulder-p :joint-angle 130)
  (send *robot* :rarm-shoulder-p :joint-angle 130)
  (send-pose :real real :base-time base-time)
  (send *robot* :lleg-crotch-p :joint-angle -100)
  (send *robot* :rleg-crotch-p :joint-angle -100)
  (send *robot* :rarm-shoulder-p :joint-angle 180)
  (send *robot* :larm-shoulder-p :joint-angle 180)
  (send-pose :real real :base-time base-time)
  (warn "start auto-balancer!!!~%")
  (send *ri* :start-auto-balancer)
  (warn "start stabilizer!!!~%")
  (send *ri* :start-st)
  (send *robot* :reset-pose)
  (send *robot* :rarm-elbow-p :joint-angle -180)
  (send *robot* :larm-elbow-p :joint-angle -180)
  (send-pose :real real :base-time base-time)
  (send *robot* :reset-pose)
  (send-pose :real real :base-time base-time)
  )

(defun get-up-main (&key (real t) (base-time 5000))
  (if (y-or-n-p "Rolling over needed?~%")
      (progn (if (y-or-n-p "Direction is left?~%")
                 (roll-over :real real :direction :left :base-time base-time)
               (roll-over :real real :direction :right :base-time base-time)
               )
             (get-up :real real :base-time base-time)
             )
    (get-up :real real :face-down t :base-time base-time)
    ))
